@using ProjetoE21.Dados
<link rel="stylesheet" href="~/css/HoverCard.css" />

<style>
    .hoverCard:hover {
        animation-name: HoverCard1;
        animation-duration: 0.50s;
        animation-iteration-count: 1;
        animation-fill-mode: forwards;
    }

    .hoverCard2:hover {
        animation-name: HoverCard2;
        animation-duration: 0.50s;
        animation-iteration-count: 1;
        animation-fill-mode: forwards;
    }
</style>

<div class="d-flex" style="width: 100%; margin-top: 12px">
    <div style="width: 40%" class="m-2 text-center">
        <p>Empregos</p>
    </div>
    <aside style="width: 40%" class="m-2 text-center">
        <p>Serviços</p>
    </aside>
</div>

<div class="d-flex" style="width: 100%; justify-content:center;">

    <div style="border-radius:10px; width: 40%" class="m-2">
        @foreach (var i in ProjetoE21.Dados.Listas.empregos.OrderBy(emprego => emprego.Distancia))
        {
            <div class="d-flex">
                <div class="card mb-5 hoverCard" style="width: 100%">
                    <div class="row g-0">
                        <div class="row flex-column">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(model => i.Empresa.Nome)</h5>
                                <p class="card-text">
                                    @Html.DisplayFor(model => i.Descricao)
                                </p>
                                <p class="card-text">
                                <p name="rua">@Html.DisplayFor(model => i.Local.Rua)</p>  <p name="cidade">@Html.DisplayFor(model => i.Local.Cidade)</p>
                                <br>
                                <p name="distancia">@Html.DisplayFor(model => i.MostrarD)</p>
                                <br>
                                    @Html.DisplayFor(model => i.HoraDeInicio.TimeOfDay) @Html.DisplayFor(model => i.HoraDeFim.TimeOfDay)
                                    <br>
                                    <span>Dias Trabalhados: </span>@Html.DisplayFor(model => i.DiasTrabalhados)
                                </p>
                                <div class="d-flex justify-content-between">
                                    <span>R$: @Html.DisplayFor(model => i.Salario)</span>
                                    <span> Data da postagem: 10/12</span>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <div class="card-body">
                                @if (Usuario.LogadoE == null)
                                {
                                    <span href="#" class="card-link" style="text-decoration:none; font-size:1em; color:green;">@Html.ActionLink("Candidatar", "Candidatar", new { Id = i.Id })</span>
                                    <span class="card-link" style="text-decoration:none; font-size:1em; color:blue;">@Html.ActionLink("Salvar", "Favoritar", new { Id = i.Id })</span>
                                    <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:red;">Compartilhar</a>

                                }
                                else
                                {
                                    <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:green;">Candidatar</a>
                                    <span class="card-link" style="cursor:pointer; text-decoration:none; font-size:1em; color:blue;">Salvar</span>
                                    <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:red;">Compartilhar</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div style="border-radius:10px; width: 40%" class="m-2">
        @foreach (var i in ProjetoE21.Dados.Listas.servicos.OrderBy(servico => servico.Distancia))
        {
            <div class="d-flex">
                <div class="card mb-5" style="width: 100%">
                    <div class="row g-0 hoverCard2">
                        <div class="row flex-column">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(model => i.EmpresaS.Nome)</h5>
                                <p class="card-text">
                                    @Html.DisplayFor(model => i.Descricao)
                                </p>
                                <p class="card-text">
                                <p name="rua">@Html.DisplayFor(model => i.Local.Rua)</p>  <p name="cidade">@Html.DisplayFor(model => i.Local.Cidade)</p>
                                    <br>
                                    <p name="distancia">@Html.DisplayFor(model => i.MostrarD)</p>

                                    @Html.DisplayFor(model => i.Dia) @Html.DisplayFor(model => i.Hora)
                                </p>
                                <div class="d-flex justify-content-between">
                                    <span>R$: @Html.DisplayFor(model => i.Pagamento)</span>
                                    <span> Data da postagem: 10/12</span>
                                </div>

                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <div class="card-body">
                                <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:green;">Candidatar</a>
                                <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:blue;">Salvar</a>
                                <a href="#" class="card-link" style="text-decoration:none; font-size:1em; color:red;">Compartilhar</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    // document.onload = geocoding();

    // async function geocoding() {
    // {
    //     var ruaJovem = Usuario.LogadoJ.Local.Rua;

    //     var cidadeJovem = Usuario.LogadoJ.Local.Cidade;
    // }
        
    //     var local = "ruaJovem" + "+" + "cidadeJovem";
    //     var url1 = `https://api.opencagedata.com/geocode/v1/json?q=${local}&key=de8ec31691d84fada09018809123c939&pretty=1`;

    //     var latitude1 = 0
    //     var longitude1 = 0;

    //     await fetch(url1)
    //         .then(data => data.json())
    //         .then(item => {
    //             latitude1 = parseFloat(item.results[0].geometry.lat)

    //             longitude1 = parseFloat(item.results[0].geometry.lng)
    //         })

    //     var ruas = document.getElementsByName("rua")
    //     var cidades = document.getElementsByName("cidade")
    //     var distancias = document.getElementsByName("distancia")

    //     for (var i = 0; i < ruas.length; i++) {
    //         var endereco = `${ruas[i].innerHTML} + ${cidades[i].innerHTML}`
    //         var url2 = `https://api.opencagedata.com/geocode/v1/json?q=${endereco}&key=de8ec31691d84fada09018809123c939&pretty=1`

    //         var latitude2;
    //         var longitude2;

    //         await fetch(url2)
    //             .then(data => data.json())
    //             .then(item => {
    //                 console.log(item)

    //                 latitude2 = parseFloat(item.results[0].geometry.lat)

    //                 longitude2 = parseFloat(item.results[0].geometry.lng)
    //             })

    //         var distancia = formulaDeHaversine(latitude1, longitude1, latitude2, longitude2);

    //         distancias[i].innerHTML = `${distancia}km`;
    //     }
    // }

    // function toRadians(degrees) {
    //     return degrees * Math.PI / 180;
    // }

    // function formulaDeHaversine(lat1, lon1, lat2, lon2) {
    //     var R = 6371;
    //     var dLat = toRadians(lat2 - lat1);
    //     var dLon = toRadians(lon2 - lon1);

    //     var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    //         Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
    //         Math.sin(dLon / 2) * Math.sin(dLon / 2);

    //     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    //     var distance = R * c;

    //     return distance.toFixed(2);
    // }
</script>